/**
 * Employee Portal
 * IATec Employee Portal API
 *
 * OpenAPI spec version: 1.0.0-preview-5
 * Contact: andre.guilherme@iatec.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class VacationApi {

    protected basePath = 'https://virtserver.swaggerhub.com/iatec/Employee/1.0.0-preview-1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Get a list of available vacation receipts
     * @summary List vacation receipts
     * @param count The maximum number of items the search will bring.
     * @param maxperiod Limit the search to the specified period or after.
     */
    public getManyVacationReceipts(count: number, maxperiod: number, extraHttpRequestParams?: any): Observable<Array<models.InlineResponse2001>> {
        return this.getManyVacationReceiptsWithHttpInfo(count, maxperiod, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Get the vacation receipt for a specific period
     * @summary Get vacation receipt
     * @param period 
     */
    public getVacationReceipt(period: number, extraHttpRequestParams?: any): Observable<models.VacationReceipt> {
        return this.getVacationReceiptWithHttpInfo(period, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * List vacation receipts
     * Get a list of available vacation receipts
     * @param count The maximum number of items the search will bring.
     * @param maxperiod Limit the search to the specified period or after.
     */
    public getManyVacationReceiptsWithHttpInfo(count: number, maxperiod: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/vacations';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'count' is not null or undefined
        if (count === null || count === undefined) {
            throw new Error('Required parameter count was null or undefined when calling getManyVacationReceipts.');
        }
        // verify required parameter 'maxperiod' is not null or undefined
        if (maxperiod === null || maxperiod === undefined) {
            throw new Error('Required parameter maxperiod was null or undefined when calling getManyVacationReceipts.');
        }
        if (count !== undefined) {
            queryParameters.set('count', <any>count);
        }

        if (maxperiod !== undefined) {
            queryParameters.set('maxperiod', <any>maxperiod);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/xml',
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get vacation receipt
     * Get the vacation receipt for a specific period
     * @param period 
     */
    public getVacationReceiptWithHttpInfo(period: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/vacations/${period}'
                    .replace('${' + 'period' + '}', String(period));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'period' is not null or undefined
        if (period === null || period === undefined) {
            throw new Error('Required parameter period was null or undefined when calling getVacationReceipt.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/xml',
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
